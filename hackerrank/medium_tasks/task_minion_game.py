
data


class Player():
    points = 0

    letters_of_type = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    _own = ''

    # 33.7
    def build_words(self, result_list):
        # whats going on here?
        list_of_words = []
        for index, letter in enumerate(result_list):
            try:
                for nested in index:
                    _next = nested + 1
                    first_letter = self._own[nested]
                    substring = self._own[_next:]

                    list_of_words.append(first_letter)
                    for letter in substring:
                        last_word = list_of_words[-1]
                        new_word = last_word + letter
                        list_of_words.append(new_word)
            except IndexError:
                continue
        return set(list_of_words)

    def count_points(self, list_of_words):
        # this is definitely awesome one thanks
        # to Jochen Ritzel and stackoverflow

        # 3.8
        def occurances(sub):
            count = start = 0

            while True:
                start = self._own.find(sub, start) + 1
                if start > 0:
                    count += 1
                else:
                    return count

        for word in list_of_words:
            num = occurances(word)
            self.points += num

        return self.points


class Kevin(Player):
    letters_of_type = 'AEIOU'


class Stuart(Player):
    letters_of_type = 'BCDFGHJKLMNPVWXYZ'

# 48
class Competition():

    vovels = 'AEIOU'

    def __init__(self, the_string):
        self.the_string = the_string
        self.player1 = Kevin()
        self.player2 = Stuart()

    def _get_index(self):
        kevins = []
        stuarts = []

        for letter in self.the_string:
            if letter in self.vovels:
                kevins.append(letter)
            else:
                stuarts.append(letter)

        Kevin._own = Kevin._own.join(kevins)
        Stuart._own = Stuart._own.join(stuarts)

    # 1.2
    def calculate_for_player(self, player):
        own_list = player._own
        list_of_words = player.build_words(own_list)
        return player.count_points(list_of_words)

    def compare_result(self):
        # get da string to both players._own
        self._get_index()

        result_Kevin = self.calculate_for_player(self.player1)
        result_Stuart = self.calculate_for_player(self.player2)
        print(result_Kevin)
        print(result_Stuart)

        if result_Kevin > result_Stuart:
            print("Kevin %s" % result_Kevin)
        elif result_Kevin < result_Stuart:
            print("Stuart %s" % result_Stuart)
        else:
            return 'This is Draw!'


dd = Competition('BANANA')
dd.compare_result()
